{"version":3,"sources":["assets/eye_transBG.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","Navbar_default","bg","variant","sticky","Brand","href","alt","src","eye","width","height","id","Nav_default","fill","Item","Link","Container_default","fluid","Row_default","Col_default","xs","Jumbotron_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iXCoDzBC,mLAvCP,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,GAAG,OAAOC,QAAQ,OAAOC,OAAO,OACpCP,EAAAC,EAAAC,cAACE,EAAAH,EAAOO,MAAR,CAAcC,KAAK,SACnBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,GAAGC,IAAKC,IAAKC,MAAM,KAAKC,OAAO,KACpCX,UAAU,2BACVY,GAAG,UAEN,iBAEDf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAKgB,MAAI,GACLjB,EAAAC,EAAAC,cAACc,EAAAf,EAAIiB,KAAL,KACIlB,EAAAC,EAAAC,cAACc,EAAAf,EAAIkB,KAAL,CAAUV,KAAK,SAAf,SAEJT,EAAAC,EAAAC,cAACc,EAAAf,EAAIiB,KAAL,KACIlB,EAAAC,EAAAC,cAACc,EAAAf,EAAIkB,KAAL,CAAUV,KAAK,YAAf,aAEJT,EAAAC,EAAAC,cAACc,EAAAf,EAAIiB,KAAL,KACIlB,EAAAC,EAAAC,cAACc,EAAAf,EAAIkB,KAAL,CAAUV,KAAK,YAAf,cAIZT,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAWoB,OAAK,GACZrB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,MACAD,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,KACID,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAKuB,GAAI,IACTxB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAKuB,GAAI,GACLxB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAWoB,OAAK,GACZrB,EAAAC,EAAAC,cAAA,wDAGRF,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAKuB,GAAI,cAjCXE,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e8a8d80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye_transBG.6cd915b6.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport eye from './assets/eye_transBG.png';\n\nclass App extends Component {\n    render() {\n        return (\n        <div className=\"App\">\n            <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n                <Navbar.Brand href=\"#home\">\n                <img alt=\"\" src={eye} width=\"30\" height=\"30\"\n                    className=\"d-inline-block align-top\"\n                    id=\"brand\"\n                />\n                {' blueeyes.dev'}\n                </Navbar.Brand>\n                <Nav fill>\n                    <Nav.Item>\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link href=\"#aboutme\">About Me</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link href=\"#gallery\">Gallery</Nav.Link>\n                    </Nav.Item>\n                </Nav>\n            </Navbar>\n            <Container fluid>\n                <Row></Row>\n                <Row>\n                    <Col xs={2}></Col>\n                    <Col xs={8}>\n                        <Jumbotron fluid>\n                            <p>This is some text inside of the jumbotron</p>\n                        </Jumbotron>\n                    </Col>\n                    <Col xs={2}></Col>\n                </Row>\n            </Container>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}